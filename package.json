{
  "name": "inline-source",
  "description": "Inline all flagged js & css source files",
  "version": "2.0.0",
  "author": "popeindustries <alex@pope-industries.com>",
  "keywords": [
    "inline",
    "html",
    "js",
    "css"
  ],
  "dependencies": {
    "csso": "1.3.11",
    "htmlparser2": "3.8.2",
    "lodash": "3.6.0",
    "uglify-js": "2.4.19"
  },
  "devDependencies": {
    "should": "3.3.2",
    "mocha": "*"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec --require should"
  },
  "engines": {
    "node": ">=0.10"
  },
  "repository": "git://github.com/popeindustries/inline-source.git",
  "readmeFilename": "README.md",
  "readme": "[![NPM Version](https://img.shields.io/npm/v/inline-source.svg?style=flat)](https://npmjs.org/package/inline-source)\n[![Build Status](https://img.shields.io/travis/popeindustries/inline-source.svg?style=flat)](https://travis-ci.org/popeindustries/inline-source)\n\n# inline-source\n\nInline and compress all `<script>` or `<link>` tags that contain the `inline` attribute.\n\n**Note:** Resources are loaded *synchronously*, so these operations are best done during a build or template precompile step, and not per server request.\n\n## Usage\n\n**inline(htmlpath, [html], [options])**: synchronously parse `html` content for `<script>` and `<link>` tags containing an `inline` attribute, and replace with (optionally compressed) file contents.\n\nIf `html` content is omitted, content will be loaded from `htmlpath`.\n\nAvailable `options` include:\n- `compress`: enable/disable compression of inlined content (default `true`)\n- `swallowErrors`: enable/disable suppression of errors (default `true`)\n- `rootpath`: directory path used for resolving absolute inlineable paths (default `process.cwd()`)\n- `attribute`: attribute used to parse sources (default `inline`)\n- `inlineJS`: enable/disable inlining of `<script>` tags (default `true`)\n- `inlineCSS`: enable/disable inlining of `<link>` tags (default `true`)\n- `pretty`: maintain leading whitespace when `options.compress` is `false` (default `false`)\n\n**NOTE:** If an error is encoutered when inlining a tag, the `inline` attribute will be removed and the remaining tag contents will be left untouched *unless* `options.swallowErrors = false` (in which case an `Error` will be thrown).\n\n```bash\n$ npm install inline-source\n```\n```html\n<!-- located at project/src/html/index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- inline project/src/js/inlineScript.js -->\n  <script inline src=\"../js/inlineScript.js\"></script>\n  <!-- inline project/www/js/inlineScript.js -->\n  <script inline src=\"/js/inlineScript.js\"></script>\n  <!-- inline project/src/css/inlineStyle.css -->\n  <link inline rel=\"../css/inlineStyle.css\"></link>\n</head>\n</html>\n```\n```javascript\nvar inline = require('inline-source')\n  , fs = require('fs')\n  , path = require('path')\n  , htmlpath = path.resolve('project/src/html/index.html');\n\nvar html = inline(htmlpath, {\n  compress: true,\n  swallowErrors: false,\n  rootpath: path.resolve('www')\n});\n```",
  "license": "MIT"
}
